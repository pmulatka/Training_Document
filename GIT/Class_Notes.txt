

	
#########################
Day 8 : 5th Sep. 2025
#########################


	- Version Control System using GIT ::::
	
	What is Version Control System ?
	
		- It is used to Version Control the Changes
		- It is used to Track the Source Code Changes!
		
	- Create Source Code! 
	
	index.html 
		
	<html>
	---
	---
	---
	--
	-----
	--
	-------
	</html>
	
	save index.html in a file system and test the changes.
	
	<html>
	---
	---
	---
	--
	-----
	--
	-------asdfsdf
	asdfasdf
	asdfsfasdfasdfsdf
	asdf
	asdfsfasdfasdfsdf
	</html>	

	save index.html in a file system and test the changes.

	<html>
	---
	---asfasdfasdf
	---asfasdf
	--asfsdf
	-----
	--
	-------asdfsdf
	asdfasdf
	asdfsfasdfasdfsdf
	asdf
	asdfsfasdfasdfsdf
	</html>	

	save index.html in a file system and test the changes.


	Using Version Control System :::
	
		
	<html>
	---
	---
	---
	--
	-----
	--
	-------
	</html>
	
	save index.html in a file system	--> 	index.html_v1.0 			# Tag/Version/Commit_id

	<html>
	---
	---
	---
	--asdfasdfsadf
	dfgsdfgsdfgsdfgsdfgsdfgdfg
	sdfasdfsad	-----
	--
	-------
	</html>
	
	save index.html in a file system	--> 	index.html_v1.1 			# Tag/Version/Commit_id
	save index.html in a file system	--> 	index.html_v1.2 			# Tag/Version/Commit_id
	save index.html in a file system	--> 	index.html_v1.3 			# Tag/Version/Commit_id
	save index.html in a file system	--> 	index.html_v1.4 			# Tag/Version/Commit_id
	save index.html in a file system	--> 	index.html_v1.5 			# Tag/Version/Commit_id
	save index.html in a file system	--> 	index.html_v1.6 			# Tag/Version/Commit_id


	Types of Version Control System :::
	
		- Local VCS 
		
		- Centralized VCS 
		
		- Distributed VCS 
		
		
	
	GIT :::
	
		- Git is  Open-Source Distributed Version Control System 
		- It is used to Version Control the Changes
		- It is used to Track the Source Code Changes!
		- It is used to perform Parallel Development using Branching Technique	
		
	
	- Remote Repository	:	Maintained in the Remote Repository Server 
		- GitHub 
		
		Other similar Products:
		
		- Azure Repos 
		- Gitlab 
		- BitBucket 
		- AWS Code Commit 		
	
	- Local Repository	: Maintained in the Local Machine 
		- Install Git Client in Local Machine
		
		
	Working with GIT :

	- Git file workflow 
	- Git Cli Commands 
	- Git Branching Techniques & Strategies
	- GIT Misc. Commands
	- Remote Repositories
	
	
	- Git File Workflow ::::
	
	
	Local Machine 																					Remote Server 
	
	Install git client 
	
	
	Working Directory 				Staging/Index Area						Local Repository		 	Remote Repository
	
	index.html 		 --------------> index.html			----------------->   index.html_v1.0 -----------> index.html_v1.0
						git add 						   git commit 						  git push



	Developers' Work load :::
	
	-	Enhancement Project / Bugfixing 
	
	-	Create New Service 
	
	
	Local Machine 																					Remote Server 
	
	Install git client 
	
	
	Working Directory 				Staging/Index Area						Local Repository		 	Remote Repository
	
	index.html 		 --------------> index.html			----------------->   index.html_v1.0 -----------> index.html_v1.0
						git add 						   git commit 						  git push

	
	- Git Clone  			# To Clone/Copy the entire Remote Repository to Local Machine
	
	- Git add  				# To add the changes from Working Directory to Staging/Index Area 
	
	- Git Commit			# To Commit the changes from Staging/Index Area to Local Repository
	
	- Git Push				# To Push the Changes from Local Repository to Remote Repository 
	
	- Git Pull/git Fetch :::	
		
		# Both git pull & git fetch are used to handle the incremental changes from Remote Repositories
		
		# Git Fetch :
		
			It will just check for the incremental changes in Remote Repository, if the incremental changes exist, it will update the incremental changes only in the Local Repository. It will NEVER update the Working Directory.
			Perform explicit Merge/pull to update the Working Directory.
			
		# Git Pull :
		
			It will check for the incremental changes in Remote Repository, if the incremental changes exist, it will update the incremental changes in the Local Repository as well in the Working Directory.
			
			git pull = git fetch + git merge 
			
			As a best practise, Git Pull is always recommended to keep the Local Repository to be in-sync with Repository
			

	- git init 				# To initialize a Local Repository
							# It will Create a GIT Directory in the Local Machine as part of Working Directory 
							# It will create a default branch - master/main
	
	- Fork 					# Is a process: to Copy a Remote Repository to another Remote Repository


	- git remote!
	
	
Next ::
	
	Install and Work with git client :



#########################
Day 9 : 8th Sep. 2025
#########################
	
	Install and Work with git client :
	
	Local Machine 																			
	
	Install git client ::::		https://git-scm.com/downloads
	
		Windows :
		
			Git Cmd 	-> Powershell users 
			
			Git Bash 	-> Linux Users
			
			Git GUI 	-> GUI / Visual Studio Code IDE.

		apt install git -y 			Linux Ubuntu Machine!
		
		
	
	Working Directory 				Staging/Index Area						Local Repository
	
	index.html 		 --------------> index.html			----------------->   index.html_v1.0
						git add 						   git commit 						
						
						
		Windows Machine :
		
			- GIT BASH  --> Based on Linux Bash Shell   ********
			
			- GIT CMD 	--> Based on Windows PowerShell 
			- GIT GUI 	--> GUI Tool 			



	Open GitBash :
	
		git --version 
		
		
	Create dedicated Project Workspace :
	
		cd d:
		
			mkdir PLDevOps_Workspace 
				cd PLDevOps_Workspace
					mkdir Project1 
					mkdir Project2 
					mkdir Repo1 
					mkdir Repo2 
					
	
	Create/Initialize local git repository! 
	
	- git init 				# To initialize a Local Repository
							# It will Create a GIT Directory in the Local Machine as part of Working Directory 
							# It will create a default branch - master/main
	
		
	Working Directory 				Staging/Index Area						Local Repository
	
	file1.txt 		 --------------> file1.txt 			----------------->    
						git add 						   git commit 						
									
									
	- git status 			# To check the current status of git repository 
	
	- Git add  				# To add the changes from Working Directory to Staging/Index Area 
	
	- Git Commit			# To Commit the changes from Staging/Index Area to Local Repository
	
	- Git log 				# To get the Commit History for tracking the changes 
	
	- HEAD Pointer			# Is pointer used by git and it always points to the latest commit of current branch


	Process : Very first time after installing GIT 
	
	- git init 
	
	- git config --global user.name "Loksai"
	
	- git config --global user.email "Loksai@asdf.com"
	
	- echo "rec1" >> file1.txt 
	
	- git add file1.txt 
	
	- git commit -m "Created file1.txt"

	- ls 						# Is a Linux Command to get the list of files/Dirs from Working Directory
	
	- git ls-files				# To get the list of files that are being tracked by git.
	
	
	
	
	GIT ADD :::
	
		git add <file_name>	
		
		git add <file1_name> <file2_name>
		
		git add *.java *.txt <file1>
		
		git add .										# . denotes all the untracked files/Changes from working directory
		
	
	GIT LOG ::
	
		git log 				# To Commit the changes from Staging/Index Area to Local Repository
		
		git log --oneline		# To get the short Commit id and its history 
		
		git log -3 
		
		git log --oneline -3		
		
		git log --stat -1
	
		
	GIT SHOW:
	
		git show <Commit_id>	# To the get the details of any specific commit 
		
	GIT DIFF :
	
		git diff 				# To compare the changes between working directory and Local Repository
		
	
	Undo the Changes from Staging Area :::
	
		- git rm --cached <file_name>	# Unstage the changes - the changes will be take back to working directory 
		
		- git rm -f <file_name>			# Unstage the changes - the file will be permanantly removed
		
		
	GIT COMMIT :
	
		- git commit -m "<Valid Commit Message>"

			# Commit Message should be relevant to the Changes.
			
			# Commit Message  - Rel_# / CR# 
			
			# Eg.: 
			
				Rel0825-Updated Payment Module
				
				
			git commit --amend -m "Valid_Message"		# Change the Commit message for the last commit.

  501  git --version
  502  pwd
  503  cd d:
  504  cd d:
  505  cd d:
  506  mkdir PLDevOps
  507  cd PLDevOps/
  508  clear
  509  pwd
  510  mkdir Repo1
  511  cd Repo1/
  512  clear
  513  pwd
  514  cd ..
  515  mkdir Repo2
  516  ll
  517  clear
  518  pwd
  519  ls
  520  cd Repo1/
  521  clear
  522  ls
  523  git init
  524  ls
  525  ls -a
  526  cd .git
  527  ls
  528  cd ..
  529  clear
  530  git status
  531  ls
  532  echo "rec1" >> file1.txt
  533  ls
  534  cat file1.txt
  535  git status
  536  git add file1.txt
  537  git status
  538  git commit -m "Created file1.txt"
  539  git status
  540  ls
  541  git log
  542  ls
  543  echo "rec1" >> file2.txt
  544  git status
  545  git add file2.txt
  546  git status
  547  git commit -m "Created file2.txt"
  548  git log
  549  echo "rec1" >> s1.txt
  550  git add s1.txt
  551  git commit -m "created s1.txt"
  552  git log
  553  ls -a
  554  git log --oneline
  555  git log
  556  git config --global user.name "Loksai"
  557  echo "rec1" >> s2.txt
  558  git add s2.txt
  559  git commit -m "Created s2.txt"
  560  clear
  561  ls
  562  git log
  563  echo "rec1" >> s3.txt
  564  git commit -m "Created s3.txt"
  565  clear
  566  git add .
  567  git commit -m "Created s3.txt"
  568  clear
  569  cd ..
  570  ls
  571  clear
  572  ls
  573  cd Repo2
  574  git init
  575  ls
  576  ls -a
  577  clear
  578  ls
  579  echo "rec1" >> a1.txt
  580  ls
  581  cat a1.txt
  582  git status
  583  git ls-files
  584  git add a1.txt
  585  git status
  586  git ls-files
  587  git commit -m "Created a1.txt"
  588  git status
  589  git ls-files
  590  clear
  591  git log --oneline
  592  ls
  593  git status
  594  echo "rec1" >> a2.txt
  595  echo "rec1" >> a3.txt
  596  echo "rec1" >> a4.txt
  597  echo "rec1" >> index.html
  598  echo "rec1" >> signin.html
  599  echo "rec1" >> tem.java
  600  echo "rec1" >> q1.java
  601  echo "rec1" >> q2.java
  602  echo "rec1" >> q3.java
  603  echo "rec1" >> w1.doc
  604  echo "rec1" >> w2.doc
  605  echo "rec1" >> w3.doc
  606  echo "rec1" >> w4.doc
  607  ls
  608  cat index.html
  609  clear
  610  ls
  611  git status
  612  git add a2.txt
  613  git status
  614  git add q1.java w1.doc
  615  git status
  616  git add *.java *.txt
  617  git status
  618  git add .
  619  git status
  620  git commit -m "Created some files"
  621  git status
  622  git ls-files
  623  clear
  624  git log
  625  echo "Rec1" >> m1.txt
  626  git add .
  627  git commit -m "created m1.txt"
  628  echo "Rec1" >> m2.txt
  629  git add .
  630  git commit -m "created m2.txt"
  631  echo "Rec1" >> m3.txt
  632  git add .
  633  git commit -m "created m3.txt"
  634  echo "Rec1" >> m4.txt
  635  git add .
  636  git commit -m "created m4.txt"
  637  echo "Rec1" >> m4.txt
  638  git add .
  639  git commit -m "created m4.txt"
  640  clear
  641  git log
  642  clear
  643  git log
  644  clear
  645  git log
  646  git commit --oneline
  647  clear
  648  git log
  649  git commit --oneline
  650  clear
  651  git log
  652  git show 9d552e4f
  653  git show 9552ee417
  654  git log --oneline
  655  git show 9552ee4
  656  ls
  657  git show c0594ad
  658  cat m4.txt
  659  echo "record1" > m4.txt
  660  cat m4.txt
  661  git add .
  662  git commit -m "Updated m4.txt"
  663  git log --oneline
  664  git show b0ff417
  665  clear
  666  git log --oneline
  667  git log -3
  668  git log -1
  669  git log --oneline -1
  670  git log --oneline -3
  671  git log --stat -1
  672  git show b0ff417b
  673  clear
  674  ls
  675  git status
  676  cat w4.doc
  677  git log --oneline  -1
  678  git show b0ff417
  679  echo "record2" >> m4.txt
  680  git status
  681  git diff
  682  echo "rec2" >> m3.txt
  683  git diff
  684  clear
  685  cd ..
  686  mkdir Repo3
  687  cd Repo3/
  688  git init
  689  clear
  690  git status
  691  echo "rec1" >> s1.txt
  692  git add .
  693  git commit -m "Created s1.txt"
  694  clear
  695  ehco "rec1 "" q1.txt
  696  ls
  697  echo "rec1" >> q1.txt
  698  echo "rec1" >> q2.txt
  699  git status
  700  git add .
  701  git status
  702  ls
  703  git ls-files
  704  git rm --cached q1.txt
  705  ls
  706  git ls-files
  707  git status
  708  git commit -m "created q2.txt"
  709  git status
  710  git add .
  711  git status
  712  ls
  713  git ls-files
  714  git rm -f q1.txt
  715  git ls-files
  716  ls
  717  git status
  718  git log --oneline
  719  echo "rec1" >> w1.txt
  720  git add .
  721  git commit -m "Sep25Rel-1001 - Created w1.txt"
  722  git log --oneline
  723  git status
  724  echo "rec1" >> l1.txt
  725  git add .
  726  git commit -m "asdfasdfasdfasd"
  727  clear
  728  git log --oneline
  729  git commit -m "Valid Message"
  730  git commit --amend -m "Valid_Message"
  731  git log --oneline
  732  cd ..
  733  history


Next :

	Revert / Reset 
	Branching Techniques ....


	

#########################
Day 10 : 9th Sep. 2025
#########################

	GIT Ignore :::::

				- Used to Ignore the files from tracking!
				- Create .gitignore file and update the files with all the file names/folder names to be ignored 
				- As a best practise, .gitignore should be the very first commit 
				
		Workspace Directory?


	vi .gitignore 

		*.war
		*.jar
		sample.txt
		readme.doc
		*.doc
		target/
		DBase_Secrets
		DB_Password
		sdir1/file1.txt 
	
	Local Machine
	
	Working Directory 		---> 		Staging/Index Area 			--->		Local Repository		=====>		Remote Repository
	
	
	Java_Web_App_Project		
	
		src 
			main 
				*.java
			test 
				*.java 
		resources 
			html 
				*.html 
			css 
				*.css 
			JavaScripts
				*.js
		application.properties
		DBase_Secrets
		DB_Password
		target
			*.war 
		Readme.md
		
	
	GIT Reset / Revert ::::
	
	git reset :::
	
		git reset is used to undo the changes from the repository
		git reset will reset the commit point to the previous commit point 
		git reset will not create any new commit point for track purpose 
		As a best practise, git reset is not recommended in the shared repository 
	
		Syntax :		
			- git reset <reset_option> <previous_Commit_ID>
			
		Reset Options ::
		
			git reset --soft <previous_Commit_ID> :::
				- git reset will reset the HEAD pointer to the previous commit point.
				- It will take the changes back to staging area 
				- The Changes will be available in staging area and working directory					
		
			git reset --mixed <previous_Commit_ID> :::									# Default
				- git reset will reset the HEAD pointer to the previous commit point.
				- It will take the changes back to working directory 
				- The Changes will be available only in working directory			
			
			git reset --hard  <previous_Commit_ID> :::
				- git reset will reset the HEAD pointer to the previous commit point.
				- It will permanently delete the files from the system 
	
			Repo1:
					
				cm5						HEAD - Latest Commit 
				cm4 
				cm3 
				cm2
				cm1

			git reset --soft cm4
			
				cm4 					HEAD - Latest Commit
				cm3 
				cm2
				cm1

			git reset cm2
			 
				cm2						HEAD - Latest Commit
				cm1		
			
			
			
			ETL Process :
			
				Extract/Transform/Load 			
	
	Git Revert ::::
	
	
		- Git Revert is same as git reset --hard option 		
		- git revert is used to undo a specific commit 		
		- git revert will create a new commit point for tracking purpose.		
		- git revert will maintain the commit history		
		- git revert is recommended in shared repositories
		
		Syntax ::
			git revert <specific_Commit_ID>	
	
	
	GIT Branching ::::
	
		- Git Branch is a logical copy of a Repository/Specific Branch.
		- It help perform parallel development
		- It help the developers to independently work on their changes without impacting others
		- Git Branching Strategy is used to maintain the integrity of default: master/main branch
			
		
		
	Repo1: 
	
		master : cm1,cm2,cm3 				# Default Branch -- Production version 
		
					cm1,cm2,cm3,f1cm1,f1cm2,f1cm3 			# Upon merging changes from feature_branch		
		
		
			feature_branch : cm1,cm2,cm3 
						   : cm1,cm2,cm3,f1cm1,f1cm2,f1cm3 
	
	

	Scenario 1:
	
		Repo1: 
		
			master : cm1,cm2,cm3 				# Default Branch -- Production version 	
			
						: cm1,cm2,cm3,Developer_Branch_Changes 		# Upon merging changes from Developer_Branch		
			
			
				Developer_Branch : cm1,cm2,cm3 
									: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon merging changes from feature_branch1&2	
				
				
					feature_branch1 : cm1,cm2,cm3
									: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3
									
					feature_branch2 : cm1,cm2,cm3
									: cm1,cm2,cm3,f2cm1,f2cm2,f2cm3
	
	Scenario 2:
	
		Repo1: 
		
			master : cm1,cm2,cm3 				# Default Branch -- Production version 	
			
						: cm1,cm2,cm3,cm4 		# cm4 are the changes merged from Integration_Branch

				Integration_Branch : cm1,cm2,cm3 
										: cm1,cm2,cm3,Developer1_Changes,Developer2_Changes  # Upon merging changes from Developer1&2
								
			
					Developer1_Branch : cm1,cm2,cm3 
										: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon merging changes from feature_branch1&2	
					
					
						feature_branch1 : cm1,cm2,cm3
										: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3
										
						feature_branch2 : cm1,cm2,cm3
										: cm1,cm2,cm3,f2cm1,f2cm2,f2cm3	
		
					Developer2_Branch : cm1,cm2,cm3 
										: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon merging changes from feature_branch1&2	
					
					
						feature_branch1 : cm1,cm2,cm3
										: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3
										
						feature_branch2 : cm1,cm2,cm3
										: cm1,cm2,cm3,f2cm1,f2cm2,f2cm3	
	
	
	Scenario 3:
	
		Repo1: 
		
			master : cm1,cm2,cm3 				# Default Branch -- Production version 	
			
						: cm1,cm2,cm3,cm4 		# cm4 are the changes merged from Release_Branch
						
						
				Release_Branch : cm1,cm2,cm3 
									: cm1,cm2,cm3,Team1_Changes,Team2_Changes 	

					Integration_Branch1 : cm1,cm2,cm3 																	# Team1
					
											: cm1,cm2,cm3,Developer1_Changes,Developer2_Changes  # Upon merging changes from Developer1&2
									
				
						Developer1_Branch : cm1,cm2,cm3 
											: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon merging changes from feature_branch1&2	
						
						
							feature_branch1 : cm1,cm2,cm3
											: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3
											
							feature_branch2 : cm1,cm2,cm3
											: cm1,cm2,cm3,f2cm1,f2cm2,f2cm3	
			
						Developer2_Branch : cm1,cm2,cm3 
											: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon merging changes from feature_branch1&2	
						
						
							feature_branch1 : cm1,cm2,cm3
											: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3
											
							feature_branch2 : cm1,cm2,cm3
											: cm1,cm2,cm3,f2cm1,f2cm2,f2cm3	
		
					Integration_Branch2 : cm1,cm2,cm3 																	# Team1
					
											: cm1,cm2,cm3,Developer1_Changes,Developer2_Changes  # Upon merging changes from Developer1&2
									
				
						Developer1_Branch : cm1,cm2,cm3 
											: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon merging changes from feature_branch1&2	
						
						
							feature_branch1 : cm1,cm2,cm3
											: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3
											
							feature_branch2 : cm1,cm2,cm3
											: cm1,cm2,cm3,f2cm1,f2cm2,f2cm3	
			
						Developer2_Branch : cm1,cm2,cm3 
											: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon merging changes from feature_branch1&2	
						
						
							feature_branch1 : cm1,cm2,cm3
											: cm1,cm2,cm3,f1cm1,f1cm2,f1cm3
											
							feature_branch2 : cm1,cm2,cm3
											: cm1,cm2,cm3,f2cm1,f2cm2,f2cm3	

Next :

	- Work with Branches!
	
		- Create branches with the cli commands 
	
	
		- GIT Rebase 
		- GIT Squash Option 
		
		
	GIT Stash 
	
	Git Remote Repos! - GITHUB 
	
	Working with GIT/GITHUB using Visual Studio Code IDE.



	
#########################
Day 11 : 11th Sep. 2025
#########################

	GIT Branching ::::
	
		- Git Branch is a logical copy of a Repository/Specific Branch.
		- It help perform parallel development
		- It help the developers to independently work on their changes without impacting others
		- Git Branching Strategy is used to maintain the integrity of default: master/main branch
			
			
	- Work with Branches!
	
		- Create branches with the cli commands :::::
		
			- git branch 						# To get the list of branches
			
			- git branch <new_branch_name> 		# To Create a new branch 
			
			- git switch -c <new_branch_name>	# To Create a new branch & Switch to new branch
			
			- git switch <existing branch>		# Switch to branch 
		
		
		Repo1 :
		
			master : cm1 
			
				feature1 : cm1 
							cm1
							
					echo "rec1" >> s1.txt 
				 
					git add .
				 
					git commit -m "f1cm1" 
					
					git switch master 				# Switch to master
					
					git merge feature1				# Used to merge the changes from feature1 branch to target branch 
													# This merge command should be executed from the target branch
					
					
	- Handle Merge Conflicts :::
	
		- Reason for Merge Conflicts :
		
			- When more than one user/feature try to update a same line in the same file on the same target branch, merge Conflict Occurs.
	
		- Fix the Merge Conflicts :		
		
			- Identify the file(s) causing the conflicts 
			- Open and review the content, & decide which feature change to be maintained/removed from that target branch
			- Edit that file(s), remove the additional header and footer lines and update the file with actual content.
			- Perform git add 
			- Perform git commit to the target branch				
		
		
	- On DevOps Approach/Perspectives :::
	
			- Always prevent Merge Conflict!
			
	
	- GIT Rebase :		

		- Rebase is used to maintain linear commit history 
		- Rebase is used to keep the current branch in-sync with target branch 
		- Rebase can prevent merge-conflicts in the target branch 
		- As a best practise, it is always recommended to use rebase before merge	
	
		- Repo1 :
		
				master: cm1,cm2,cm3 
				
					cm1,cm2,cm3,f1cm1,f1cm2,f1cm3 				# Upon Merging Changes from feature1
					
					
					cm1,cm2,cm3,f2cm1,f2cm2,f2cm3,f1cm1,f1cm2,f1cm3		# Upon Merging Changes from feature2 without proper rebase  
		
					cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3		# Get expected Linear Commit history using proper rebase!
					
					
					feature1: cm1,cm2,cm3 
					
								cm1,cm2,cm3,f1cm1,f1cm2,f1cm3 
								
								git switch master 
								
								git merge feature1
					
					
					feature2: cm1,cm2,cm3
					
								cm1,cm2,cm3,f2cm1,f2cm2,f2cm3

								git switch master 
								
								git merge feature2
								
								
						Using Rebase :

					feature2: cm1,cm2,cm3
											
								cm1,cm2,cm3,f2cm1,f2cm2,f2cm3
								
								git rebase master
								
								cm1,cm2,cm3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3

								git switch master 
								
								git merge feature2							
	
	Question : Example with git rebase and merge conflict?

	
	- GIT Squash Option :
	
	- git merge --squash <branch_name>
	
		- Is used to Combine more than one commits into one commit point.
		
		Repo1:
		
			master: cm1,cm2,cm3
			
						cm1,cm2,cm3,f1cm1,f1cm2,3,4,5,6,7,8,9,.....................,f1cm100+		# Simple merge without squash option
						
						cm1,cm2,cm3,cm4								# Combine all incremental commits from feature1 to master
						
				feature1: cm1,cm2,cm3
				
							cm1,cm2,cm3,f1cm1,f1cm2,3,4,5,6,7,8,9,.....................,f1cm100+
							
							git switch master 
							
							git merge feature1 	# run this command if you dont want to make combined branch history, else run below command					


							git merge --squash feature1   # this will not update head pointer you need to explicitly run git commit command
							+
							git commit -m "cm4 - Combined Changes from feature1" 
							
	Question : What is difference between  git merge feature1 and git merge --squash feature1?

	
	- git cherry-pick :
		
	- git cherry-pick ::	****

		- It is used to merge the specific commit to the target branch!
		
		git cherry-pick <commit_id> <commit_id> <commit_id>

  649  cd d:
  650  clear
  651  cd PLDevOps/
  652  ls
  653  clear
  654  ls
  655  mkdir samplerepo1
  656  cd samplerepo1/
  657  clear
  658  git init
  659  git branch
  660  echo "rec1" >> f1.txt
  661  git add .
  662  git commit -m "cm1"
  663  clear
  664  git branch
  665  git log --oneline
  666  ls
  667  git branch feature1
  668  git branch
  669  git branch feature2
  670  git branch
  671  git log --oneline
  672  git switch feature1
  673  git log --oneline
  674  git switch master
  675  git switch -c feature3
  676  clear
  677  git switch master
  678  git branch
  679  clear
  680  git branch
  681  git log -oneline
  682  git log --oneline
  683  ls
  684  git switch feature1
  685  git log --oneline
  686  ls
  687  cat f1.txt
  688  clear
  689  ls
  690  git log --oneline
  691  echo "rec1" >> s1.txt
  692  ls
  693  git add .
  694  git commit -m "f1cm1"
  695  git status
  696  git log --oneline
  697  ls
  698  git log --oneline
  699  git switch master
  700  ls
  701  git log --oneline
  702  git merge feature1
  703  ls
  704  git log --oneline
  705  git switch feature1
  706  ls
  707  cd ..
  708  mkdir samplerepo2
  709  clear
  710  cd samplerepo2/
  711  git init
  712  echo "rec1" >> file1.txt
  713  git add .
  714  git commit -m "cm1"
  715  git log --oneline
  716  cat file1.txt
  717  clear
  718  cat file1.txt
  719  git branch feature1
  720  git branch feature2
  721  git branch
  722  git switch feature1
  723  git branch
  724  ls
  725  git log --oneline
  726  cat file1.txt
  727  echo "Record2 from feature1" >> file1.txt
  728  git add .
  729  git commit -m "f1cm1"
  730  cat file1.txt
  731  git log --oneline
  732  git switch master
  733  git log --oneline
  734  git switch feature2
  735  git branch
  736  ls
  737  cat file1.txt
  738  git log --oneline
  739  ehco "Record2 from feature2" >> file1.txt
  740  echo "Record2 from feature2" >> file1.txt
  741  git add .
  742  git commit -m "f2cm1"
  743  git log --oneline
  744  cat file1.txt
  745  git switch master
  746  cat file1.txt
  747  git log --oneline
  748  git merge feature1
  749  cat file1.txt
  750  git log --oneline
  751  git merge feature2
  752  git status
  753  cat file1.txt
  754  vi file1.txt
  755  cat file1.txt
  756  git add .
  757  git commit -m "Fixed Conflict"
  758  git log --oneline
  759  cat file1.txt
  760  git show 3b3c6f2
  761  clear
  762  ls
  763  cd ..
  764  mkdir samplerepo3
  765  cd samplerepo3/
  766  git init
  767  clear
  768  echo "rec1" >> s1.txt
  769  git add .
  770  git commit -m "cm1"
  771  echo "rec1" >> s2.txt
  772  git add .
  773  git commit -m "cm2"
  774  echo "rec1" >> s3.txt
  775  git add .
  776  git commit -m "cm3"
  777  clear
  778  git log --oneline
  779  ls
  780  git status
  781  git branch
  782  git branch feature1
  783  git branch feature2
  784  git log --oneline
  785  ls
  786  git switch feature1
  787  ls
  788  git log --oneline
  789  echo "rec1" >> q1.txt
  790  git add .
  791  git commit -m "f1cm1"
  792  echo "rec1" >> q2.txt
  793  git add .
  794  git commit -m "f1cm2"
  795  echo "rec1" >> q3.txt
  796  git add .
  797  git commit -m "f1cm3"
  798  echo "rec1" >> q4.txt
  799  git add .
  800  git commit -m "f1cm4"
  801  clear
  802  git log --oneline
  803  git rebase master
  804  git switch master
  805  git merge feature1
  806  ls
  807  git log --oneline
  808  git switch feature2
  809  git log --oneline
  810  echo "rec1" >> w1.txt
  811  git add .
  812  git commit -m "f2cm1"
  813  echo "rec1" >> w2.txt
  814  git add .
  815  git commit -m "f2cm2"
  816  echo "rec1" >> w3.txt
  817  git add .
  818  git commit -m "f2cm3"
  819  git log --oneline
  820  ls
  821  git rebase master
  822  git log --oneline
  823  git switch master
  824  git merge feature2
  825  ls
  826  git log --oneline
  827  git switch feature1
  828  git log --oneline
  829  git rebase master
  830  git log --oneline
  831  ls
  832  echo "rec1" >> l1.txt
  833  git add .
  834  git commit -m "f1cm1"
  835  echo "rec1" >> l2.txt
  836  git add .
  837  git commit -m "f1cm2"
  838  echo "rec1" >> l2.txt
  839  git add .
  840  git commit -m "f1cm3"
  841  echo "rec1" >> l3.txt
  842  git add .
  843  git commit -m "f1cm4"
  844  echo "rec1" >> l4.txt
  845  git add .
  846  git commit -m "f1cm5"
  847  echo "rec1" >> l5.txt
  848  git add .
  849  git commit -m "f1cm6"
  850  git log --oneline
  851  git rebase master
  852  git switch master
  853  git merge --squash feature1
  854  git status
  855  git commit -m "Combined Changes from feature1"
  856  git log --oneline
  857  git show 05f3e98
  858  ls
  859  history

		
Next ::

		
	GIT Stash
	
	Remote Repositories 
	
	
#########################
Day 12 : 12th Sep. 2025
#########################

	GIT Stash :::
	
		- Is used to save the uncommited changes to a temporary area!
	
		-> Repo1:
		
			master : cm1,cm2 
			
				feature1 : cm1,cm2......
				
				feature2 : 
				
				bug-fix :
			

				git stash list							# Get the List of Stashed entires!  FILO
				
				git stash save "for l1.txt"				# Create stash entry in the stash list 	
				
				git stash apply 						# To Apply the latest entry from the stash list back the staging area	
				
				git stash apply stash@{3}				# To Apply a specific entry from the stash list back the staging area	
				
				git stash drop							# To delete/drop the latest entry from the stash list. 
				
				git stash drop stash@{3}				#  delete/drop a specific entry from the stash list. 	
				
				git stash pop							
								# To Apply the latest entry from the stash list back the staging area as well as delete/drop that latest entry
								
				git stash pop stash@{3}
								# To Apply a specific from the stash list back the staging area as well as delete/drop that entry
										
				git stash clear 						# Clean-up the Stash list!
	
	
	Remote Repositories ::::
	
		
	Developers' Work load :::
	
	-	Enhancement Project / Bugfixing 
	
	-	Create New Service 
	
	
	Local Machine 																					Remote Server 
	
	Install git client 
	
	
	Working Directory 				Staging/Index Area						Local Repository		 	Remote Repository
	
	index.html 		 --------------> index.html			----------------->   index.html_v1.0 -----------> index.html_v1.0
						git add 						   git commit 						  git push

	
	- Git Clone  			# To Clone/Copy the entire Remote Repository to Local Machine
	
	- Git add  				# To add the changes from Working Directory to Staging/Index Area 
	
	- Git Commit			# To Commit the changes from Staging/Index Area to Local Repository
	
	- Git Push				# To Push the Changes from Local Repository to Remote Repository 
	
	- Git Pull/git Fetch :::	
		
		# Both git pull & git fetch are used to handle the incremental changes from Remote Repositories
		
		# Git Fetch :
		
			It will just check for the incremental changes in Remote Repository, if the incremental changes exist, it will update the incremental changes only in the Local Repository. It will NEVER update the Working Directory.
			Perform explicit Merge/pull to update the Working Directory.
			
		# Git Pull :
		
			It will check for the incremental changes in Remote Repository, if the incremental changes exist, it will update the incremental changes in the Local Repository as well in the Working Directory.
			
			git pull = git fetch + git merge 
			
			As a best practise, Git Pull is always recommended to keep the Local Repository to be in-sync with Repository
				
	
	
	- Remote Repositories using GitHub ::::
	
	other products :
	
		- Azure Repos 
		- gitlab 
		- bitbucket 
		- aws codecommit ...
		
		
	- Work with Remote Repos 
		- create a remote repo 
		- create commits 
		- create remote branches 
		- merge the changes using Pull Request.
	
	
	- Manage the changes from local repo to remote repos 
	
	
	
		git clone <clone_url>
		
		git clone https://github.com/PL-DevOps-GenAI-0825/testrepo1.git
		
		
		git remote -v 			# List the remote repositories that are linked to a local repository
		
		
		
		git push -u origin local-feature1
		
		
		Create an access token in remote github repository 
		
			- Create PAT in Github.
			
			
			
		ETL : ==> script etl.sh 
		


	-	Create New Product/Service  :::	
	
		- Create all the changes from the scratch in local repo and push to remote repo 
		
		- Create an empty remote repo.
		
		- 
		
		List the Remote Repos link to Local Repo:
		
			git remote -v 
		
		Link any remote repo to local repo:
		
			git remote add origin https://github.com/PL-DevOps-GenAI-0825/testrepo2.git
			
		Remove remote repo from local repo:
		
			git remote remove origin
			
			
  861  cd ..
  862  mkdir demorepo1
  863  cd demorepo1/
  864  lc
  865  clear
  866  git init
  867  echo "rec1" >> f1.txt
  868  git add .
  869  git commit -m "cm1"
  870  git switch -c feature1
  871  echo "rec1" >> s1.txt
  872  clear
  873  ls
  874  git status
  875  git add .
  876  echo "rec2" >> s1.txt
  877  git add .
  878  echo "rec3" >> s1.txt
  879  git add .
  880  git status
  881  cat s1.txt
  882  git switch master
  883  git status
  884  git switch feature1
  885  git status
  886  cat s1.txt
  887  clear
  888  git stash list
  889  git status
  890  git stash save "for s1.txt"
  891  git status
  892  ls
  893  git stash list
  894  echo "rec1" >> s2.txt
  895  git add .
  896  git stash save "for s2.txt"
  897  git stash list
  898  echo "rec1" >> s3.txt
  899  git add .
  900  git stash save "for s3.txt"
  901  echo "rec1" >> s4.txt
  902  git add .
  903  git stash save "for s4.txt"
  904  echo "rec1" >> s5.txt
  905  git add .
  906  git stash save "for s5.txt"
  907  echo "rec1" >> s6.txt
  908  git add .
  909  git stash save "for s6.txt"
  910  echo "rec1" >> s7.txt
  911  git add .
  912  git stash save "for s7.txt"
  913  git stash list
  914  ls
  915  git stash apply
  916  git stash list
  917  git commit -m "s7"
  918  git stash list
  919  ls
  920  git ls-files
  921  git stash drop
  922  git stash list
  923  git stash pop
  924  ls
  925  git stash list
  926  git stash apply stash@{2}
  927  git stash list
  928  git drop stash@{2}
  929  git stash drop stash@{2}
  930  git stash list
  931  git pop stash@{2}
  932  git stash pop stash@{2}
  933  clear
  934  git commit -m "asdf"
  935  clear
  936  git stash list
  937  git stash clear
  938  git stash list
  939  ls
  940  echo "rec1" >> q1.txt
  941  git add .
  942  git stash save "q1"
  943  git stash list
  944  ls
  945  git status
  946  echo "rec1" >> q2.txt
  947  git add .
  948  git stash save "q2"
  949  clear
  950  git stash list
  951  git stash pop
  952  ls
  953  echo "rec1" >> l1.txt
  954  git add .
  955  ls
  956  git status
  957  clear
  958  cd ..
  959  mkdir remoterepos
  960  clear
  961  ls
  962  cd remoterepos/
  963  clear
  964  git clone https://github.com/PL-DevOps-GenAI-0825/testrepo1.git
  965  ls
  966  cd testrepo1/
  967  ls
  968  git status
  969  git remote -v
  970  git log --oneline
  971  ls
  972  git switch -c local-feature1
  973  git log --oneline
  974  ls
  975  echo "rec1" >> local-file1.txt
  976  git add .
  977  git commit -m "local-file1"
  978  git log --oneline
  979  git push -u origin local-feature1
  980  git switch main
  981  ls
  982  git status
  983  ls
  984  git log --oneline
  985  git fetch
  986  ls
  987  git status
  988  git pull
  989  ls
  990  git status
  991  git log --oneline
  992  git branch
  993  clear
  994  git status
  995  ls
  996  git pull
  997  ls
  998  cd ..
  999  mkdir testrepo2
 1000  cd testrepo2/
 1001  git init
 1002  echo "rec1" >> f1.txt
 1003  git add .
 1004  git commit -m "f1"
 1005  clear
 1006  git log
 1007  ls
 1008  git remote -v
 1009  git remote add origin https://github.com/PL-DevOps-GenAI-0825/testrepo2.git
 1010  git remote -v
 1011  git branch -M main
 1012  git branch -M master
 1013  git push -u origin master
 1014  git remote -v
 1015  git remote remote origin
 1016  git remote remove origin
 1017  git remote -v
 1018  history
			
Next :::

	- Maven - Build Tool 
	- Manage the Maven Project with Visual Studio Code IDE
		
	- Jenkins!
